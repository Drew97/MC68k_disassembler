00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.14.00
Created On: 2/16/2014 12:49:37 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7  START     ORG         $1000
00001000                             8                  ; first instruction of program
00001000                             9  
00001000                            10            ;MOVE.W      #$3000,$7000 ;TODO: try to get the correct data from somewhere
00001000                            11  
00001000  43F9 00001182             12            LEA         MSG_1,A1
00001006  103C 000E                 13            MOVE.B      #14,D0
0000100A  4E4F                      14            TRAP        #15
0000100C                            15  
0000100C  103C 0002                 16            MOVE.B      #2,D0           ; Take user input for starting address.
00001010  327C 2000                 17            MOVEA.W     #$2000,A1       
00001014                            18            ;SUB.L       #$FFFFFFFF,(A1)+
00001014                            19            ;SUB.L       #$FFFFFFFF, (A1)
00001014                            20            ;MOVEA.W     #$2000,A1       ; Stores the ascii address in (A1),
00001014  4E4F                      21            TRAP        #15             ; and the length in D1.W.
00001016                            22            
00001016  327C 2001                 23            MOVEA.W     #$2001,A1
0000101A  B27C 0001                 24            CMP         #1,D1
0000101E  6700 0066                 25            BEQ         ASCII_TO_HEX  ;start converting if we have 1 digit.
00001022                            26            
00001022  327C 2002                 27            MOVEA.W     #$2002,A1
00001026  B27C 0002                 28            CMP         #2,D1
0000102A  6700 005A                 29            BEQ         ASCII_TO_HEX  ;start converting if we have 2 digits.
0000102E                            30            
0000102E  327C 2003                 31            MOVEA.W     #$2003,A1
00001032  B27C 0003                 32            CMP         #3,D1
00001036  6700 004E                 33            BEQ         ASCII_TO_HEX  ;start converting if we have 3 digits.
0000103A                            34            
0000103A  327C 2004                 35            MOVEA.W     #$2004,A1
0000103E  B27C 0004                 36            CMP         #4,D1
00001042  6700 0042                 37            BEQ         ASCII_TO_HEX  ;start converting if we have 4 digits.
00001046                            38            
00001046  327C 2005                 39            MOVEA.W     #$2005,A1
0000104A  B27C 0005                 40            CMP         #5,D1
0000104E  6700 0036                 41            BEQ         ASCII_TO_HEX  ;start converting if we have 5 digits.
00001052                            42            
00001052  327C 2006                 43            MOVEA.W     #$2006,A1
00001056  B27C 0006                 44            CMP         #6,D1
0000105A  6700 002A                 45            BEQ         ASCII_TO_HEX  ;start converting if we have 6 digits.
0000105E                            46            
0000105E  327C 2007                 47            MOVEA.W     #$2007,A1
00001062  B27C 0007                 48            CMP         #7,D1
00001066  6700 001E                 49            BEQ         ASCII_TO_HEX  ;start converting if we have 7 digits.
0000106A                            50            
0000106A  327C 2008                 51            MOVEA.W     #$2008,A1
0000106E  B27C 0008                 52            CMP         #8,D1
00001072  6700 0012                 53            BEQ         ASCII_TO_HEX  ;start converting if we have 8 digits.
00001076                            54            
00001076  43F9 00001197             55            LEA         INVALID_LEN_MSG,A1         ;display the length of the input
0000107C  103C 000E                 56            MOVE.B      #14,D0
00001080  4E4F                      57            TRAP        #15   
00001082                            58              
00001082                            59            ;MOVE.L      (A1),D3       ;Move the ascii value we just read in to D3
00001082                            60            ;MOVE.L      (A1),D4
00001082                            61            
00001082                            62            ;MOVE.W      (A1),D1
00001082                            63            ;MOVE.B      #16,D2
00001082                            64            ;MOVE.B      #15,D0    ;print the input back out
00001082                            65            ;TRAP        #15          
00001082                            66  
00001082  FFFF FFFF                 67            SIMHALT             ; halt simulator
00001086                            68            
00001086                            69  ; when we get here, A1 is the ascii representation of the least significant digit (i.e., the ones place)
00001086  1C3C 0000                 70  ASCII_TO_HEX    MOVE.B   #0,D6      ; running total of converted hex number
0000108A                            71                  
0000108A                            72                  ;first digit
0000108A  1821                      73                  MOVE.B   -(A1),D4  ; Move the raw ascii value of first digit into 3007.
0000108C                            74                  
0000108C                            75                 
0000108C                            76                  
0000108C                            77                  ; Convert ascii to hex for that digit.
0000108C  0444 0030                 78                  SUB      #$30,D4   ; TODO: once this works correctly for first two digits, change each iteration accordingly
00001090  B87C 0009                 79                  CMP      #9,D4
00001094  6E00 00E8                 80                  BGT      SUBTRACT_ONE ; Necessary to convert some ASCII values.
00001098                            81                                        ; TODO: errors for invalid ASCII values.
00001098                            82                  
00001098  DC04                      83                  ADD.B   D4,D6
0000109A  B27C 0001                 84                  CMP      #1,D1
0000109E  6700 00D4                 85                  BEQ      CONVERSION_DONE
000010A2                            86                  
000010A2                            87                  ;second digit
000010A2  7800                      88                  MOVE.L   #$00000000,D4
000010A4  1821                      89                  MOVE.B   -(A1),D4
000010A6  0444 0030                 90                  SUB      #$30,D4
000010AA  B87C 0009                 91                  CMP      #9,D4
000010AE  6E00 00CE                 92                  BGT      SUBTRACT_ONE
000010B2                            93               
000010B2  C8FC 0010                 94                  MULU.W   #$00000010,D4  ; this part adds $10 * (2nd digit) to our running total.
000010B6  DC44                      95                  ADD.W    D4,D6 
000010B8                            96                    
000010B8  B27C 0002                 97                  CMP      #2,D1
000010BC  6700 00B6                 98                  BEQ      CONVERSION_DONE
000010C0                            99                  
000010C0                           100                  ;third digit
000010C0  7800                     101                  MOVE.L   #$00000000,D4
000010C2  1821                     102                  MOVE.B   -(A1),D4
000010C4  0444 0030                103                  SUB      #$30,D4
000010C8  B87C 0009                104                  CMP      #9,D4
000010CC  6E00 00B0                105                  BGT      SUBTRACT_ONE
000010D0                           106                  
000010D0  C8FC 0100                107                  MULU.W   #$00000100,D4
000010D4  DC44                     108                  ADD.W    D4,D6 
000010D6                           109      
000010D6  B27C 0003                110                  CMP      #3,D1
000010DA  6700 0098                111                  BEQ      CONVERSION_DONE
000010DE                           112                  
000010DE                           113                  ;fourth digit
000010DE  7800                     114                  MOVE.L   #$00000000,D4
000010E0  1821                     115                  MOVE.B   -(A1),D4
000010E2  0444 0030                116                  SUB      #$30,D4
000010E6  B87C 0009                117                  CMP      #9,D4
000010EA  6E00 0092                118                  BGT      SUBTRACT_ONE
000010EE                           119                  
000010EE  C8FC 1000                120                  MULU.W   #$00001000,D4
000010F2  DC44                     121                  ADD.W    D4,D6 
000010F4                           122      
000010F4  B27C 0004                123                  CMP      #4,D1
000010F8  6700 007A                124                  BEQ      CONVERSION_DONE
000010FC                           125                  
000010FC                           126                  ;fifth digit
000010FC  7800                     127                  MOVE.L   #$00000000,D4
000010FE  1821                     128                  MOVE.B   -(A1),D4
00001100  0444 0030                129                  SUB      #$30,D4
00001104  B87C 0009                130                  CMP      #9,D4
00001108  6E00 0074                131                  BGT      SUBTRACT_ONE
0000110C                           132                  
0000110C  C8FC 0001                133                  MULU.W   #$0001,D4
00001110  DE44                     134                  ADD.W    D4,D7 
00001112                           135  
00001112  B27C 0005                136                  CMP      #5,D1
00001116  6700 005C                137                  BEQ      CONVERSION_DONE
0000111A                           138                  
0000111A                           139                  ;sixth digit
0000111A  7800                     140                  MOVE.L   #$00000000,D4
0000111C  1821                     141                  MOVE.B   -(A1),D4
0000111E  0444 0030                142                  SUB      #$30,D4
00001122  B87C 0009                143                  CMP      #9,D4
00001126  6E00 0056                144                  BGT      SUBTRACT_ONE
0000112A                           145                  
0000112A  C8FC 0010                146                  MULU.W   #$0010,D4
0000112E  DE44                     147                  ADD.W    D4,D7
00001130                           148      
00001130  B27C 0006                149                  CMP      #6,D1
00001134  6700 003E                150                  BEQ      CONVERSION_DONE
00001138                           151                  
00001138                           152                  ;seventh digit
00001138  7800                     153                  MOVE.L   #$00000000,D4
0000113A  1821                     154                  MOVE.B   -(A1),D4
0000113C  0444 0030                155                  SUB      #$30,D4
00001140  B87C 0009                156                  CMP      #9,D4
00001144  6E00 0038                157                  BGT      SUBTRACT_ONE
00001148                           158                  
00001148  C8FC 0100                159                  MULU.W   #$0100,D4
0000114C  DE44                     160                  ADD.W    D4,D7
0000114E                           161      
0000114E  B27C 0007                162                  CMP      #7,D1
00001152  6700 0020                163                  BEQ      CONVERSION_DONE
00001156                           164                  
00001156                           165                  ;eight digit
00001156  7800                     166                  MOVE.L   #$00000000,D4
00001158  1821                     167                  MOVE.B   -(A1),D4
0000115A  0444 0030                168                  SUB      #$30,D4
0000115E  B87C 0009                169                  CMP      #9,D4
00001162  6E00 001A                170                  BGT      SUBTRACT_ONE
00001166                           171                  
00001166  C8FC 1000                172                  MULU.W   #$1000,D4
0000116A  DE44                     173                  ADD.W    D4,D7
0000116C                           174      
0000116C  B27C 0008                175                  CMP      #8,D1
00001170  6700 0002                176                  BEQ      CONVERSION_DONE
00001174                           177                  
00001174                           178                  ;TODO: need to correctly read ABCDEF for each case. 
00001174                           179                  ;(Test by entering these values and looking at addresses $2000 and $3000 in simulator.)
00001174                           180                  
00001174                           181                  ;TODO: once these values are stored correctly, build the final hex value by multiplying each digit by
00001174                           182                  ;      hex $10, $100, $1000, etc (one for each case of D1, which still has the number of digits)
00001174                           183                  ;      and adding each product to a running total, initialized to 0.
00001174                           184        
00001174                           185                 ;TODO: branch to done when we are done
00001174                           186                 ;SIMHALT
00001174                           187                 
00001174  E18F                     188  CONVERSION_DONE LSL.L #8,D7   ; Prepare for concatenation
00001176  E18F                     189                  LSL.L #8,D7   ; Got to perform the same operation twice to get it all the way to the left
00001178  DE46                     190                  ADD.W  D6,D7  ; concatenate the two data registers into one value
0000117A  FFFF FFFF                191                  SIMHALT ;TODO: show what is in D6. It should be the same as the intended hex input.
0000117E                           192  
0000117E                           193  SUBTRACT_ONE
0000117E  5304                     194      SUB.B  #1, D4
00001180  4E75                     195      RTS             ; return
00001182                           196  
00001182                           197  * Put variables and constants here
00001182                           198  
00001182  =0000000D                199  CR              EQU         $0D
00001182  =0000000A                200  LF              EQU         $0A
00001182                           201  
00001182= 45 6E 74 65 72 20 ...    202  MSG_1           DC.B        'Enter a hex value.',CR,LF,0
00001197= 4E 6F 74 20 61 20 ...    203  INVALID_LEN_MSG DC.B        'Not a valid length for input string.',CR,LF,0
000011BE                           204  
000011BE                           205  START_ADDR_IN   DS.B        20
000011D2                           206  
000011D2                           207      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_TO_HEX        1086
CONVERSION_DONE     1174
CR                  D
INVALID_LEN_MSG     1197
LF                  A
MSG_1               1182
START               1000
START_ADDR_IN       11BE
SUBTRACT_ONE        117E
