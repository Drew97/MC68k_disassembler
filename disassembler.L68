00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.14.00
Created On: 2/19/2014 6:55:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Disassembler
00000000                             3  * Written by : Robert Brandenburg, Danielle Jenkins, Shahin Nahar
00000000                             4  * Date       : 2/13/14
00000000                             5  * Description: Disassemble hex machine code instructions into 68K instructions
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * TODO: write disassembler
00000000                             9  * TODO: more specific TODOs for our plan
00000000                            10  * TODO: comments saying who is working where
00000000                            11  
00000000                            12  
00000000                            13  * Commenting Key: 
00000000                            14  *    "----------"  <-- subroutine commenting
00000000                            15  *    "##########"  <-- section/role commenting
00000000                            16  
00000000                            17  * Notes on saving registers on run:
00000000                            18  *    MOVEM.L A0-A3/D0-D7, -(A7) * copies all working registers to stack
00000000                            19  *    MOVEM.L (A7)+, A0-A3/D0-D7 *Restore the registers
00000000                            20  
00000000                            21  * Notes on AND filters (bit masking):
00000000                            22  * Example:
00000000                            23  *       0001 000 001 111 100   (say you want "001")
00000000                            24  *   AND 0000 000 111 000 000   (0 <-- don't want, 1 <-- do want)
00000000                            25  *       --------------------
00000000                            26  *     = 0000 000 001 000 000
00000000                            27  *
00000000                            28  * Relevant wiki page:
00000000                            29  *   https://en.wikipedia.org/wiki/Mask_(computing)#Masking_bits_to_0
00000000                            30  *
00000000                            31  
00000000                            32  *################ BEGIN MAIN ###############################
00000000                            33  *** All subroutine calls are made here ***
00001000                            34  START                   ORG        $1000       ; first instruction of program
00001000  6100 0006                 35                          BSR        PROMPT_INPUT            ; prompt the user for input
00001004                            36                    ;      BSR        READ_FIRST              ; read the first instruction
00001004                            37  
00001004                            38  
00001004  4E72 2700                 39  STOP                    STOP       #$2700          ; halt simulator, end of main
00001008                            40  
00001008                            41  *################ END MAIN ###############################
00001008                            42  *################ BEGIN IO ###############################
00001008                            43  *** IO Subroutines are kept here ***
00001008                            44  
00001008                            45  *-------------------- Print ASCII logo ----------------------
00001008  6100 0002                 46  PROMPT_INPUT            BSR         TAKE_USER_IN_S ;TODO: change to welcome/ASCII logo
0000100C                            47  *------------------- Prompt user for input -------------------
0000100C                            48  
0000100C                            49                  
0000100C  163C 0001                 50  TAKE_USER_IN_S          MOVE.B      #1,D3
00001010  43F9 00001581             51                          LEA         START_ADDR_MSG,A1  ; Prompt user for starting address
00001016  103C 000E                 52                          MOVE.B      #14,D0
0000101A  4E4F                      53                          TRAP        #15
0000101C                            54  
0000101C  6100 0016                 55                          BSR         TAKE_USER_INPUT
00001020                            56  
00001020  163C 0000                 57  TAKE_USER_IN_E          MOVE.B      #0,D3
00001024  43F9 000015B5             58                          LEA         END_ADDR_MSG,A1  ; prompt user for ending address
0000102A  103C 000E                 59                          MOVE.B      #14,D0
0000102E  4E4F                      60                          TRAP        #15
00001030                            61                          
00001030  6100 0002                 62                          BSR         TAKE_USER_INPUT
00001034                            63                          
00001034  7200                      64  TAKE_USER_INPUT         MOVE.L      #$00000000,D1   ; need to clear out the data registers we are about to use to avoid junk data.   
00001036  7A00                      65                          MOVE.L      #$00000000,D5    
00001038  7C00                      66                          MOVE.L      #$00000000,D6
0000103A  7E00                      67                          MOVE.L      #$00000000,D7
0000103C                            68  
0000103C  103C 0002                 69                          MOVE.B      #2,D0           ; Take user input for next address.
00001040  327C 2000                 70                          MOVEA.W     #$2000,A1       ; Store the ascii input in A1,(note that we might not want to use 2000 here)
00001044  4E4F                      71                          TRAP        #15             ; and the length in D1.W.  
00001046                            72  
00001046  327C 2001                 73  COUNT_INPUT_DIGITS      MOVEA.W     #$2001,A1
0000104A  B27C 0001                 74                          CMP         #1,D1
0000104E  6700 0064                 75                          BEQ         ASCII_TO_HEX  ;start converting if we have 1 digit.
00001052                            76            
00001052  327C 2002                 77                          MOVEA.W     #$2002,A1
00001056  B27C 0002                 78                          CMP         #2,D1
0000105A  6700 0058                 79                          BEQ         ASCII_TO_HEX  ;start converting if we have 2 digits.
0000105E                            80            
0000105E  327C 2003                 81                          MOVEA.W     #$2003,A1
00001062  B27C 0003                 82                          CMP         #3,D1
00001066  6700 004C                 83                          BEQ         ASCII_TO_HEX  ;start converting if we have 3 digits.
0000106A                            84            
0000106A  327C 2004                 85                          MOVEA.W     #$2004,A1
0000106E  B27C 0004                 86                          CMP         #4,D1
00001072  6700 0040                 87                          BEQ         ASCII_TO_HEX  ;start converting if we have 4 digits.
00001076                            88            
00001076  327C 2005                 89                          MOVEA.W     #$2005,A1
0000107A  B27C 0005                 90                          CMP         #5,D1
0000107E  6700 0034                 91                          BEQ         ASCII_TO_HEX  ;start converting if we have 5 digits.
00001082                            92            
00001082  327C 2006                 93                          MOVEA.W     #$2006,A1
00001086  B27C 0006                 94                          CMP         #6,D1
0000108A  6700 0028                 95                          BEQ         ASCII_TO_HEX  ;start converting if we have 6 digits.
0000108E                            96            
0000108E  327C 2007                 97                          MOVEA.W     #$2007,A1
00001092  B27C 0007                 98                          CMP         #7,D1
00001096  6700 001C                 99                          BEQ         ASCII_TO_HEX  ;start converting if we have 7 digits.
0000109A                           100            
0000109A  327C 2008                101                          MOVEA.W     #$2008,A1
0000109E  B27C 0008                102                          CMP         #8,D1
000010A2  6700 0010                103                          BEQ         ASCII_TO_HEX  ;start converting if we have 8 digits.
000010A6                           104            
000010A6  43F9 000015E8            105                          LEA         INVALID_LEN_MSG,A1         ; If we get an invalid length, give and error message and... branch back asking user for input again
000010AC  103C 000E                106                          MOVE.B      #14,D0
000010B0  4E4F                     107                          TRAP        #15
000010B2                           108  
000010B2  6780                     109                          BEQ         TAKE_USER_INPUT               
000010B4                           110  
000010B4                           111  
000010B4                           112  
000010B4                           113  *------------------- Convert to hex subroutine -------------------
000010B4                           114  
000010B4  7C00                     115  ASCII_TO_HEX            MOVE.L      #$00000000,D6      ; running total of converted hex number
000010B6                           116                  
000010B6                           117                          ;first digit
000010B6  1A21                     118                          MOVE.B      -(A1),D5  ; Move the raw ascii value of first digit into 3007.
000010B8  BA7C 0030                119                          CMP         #$30,D5
000010BC  6D00 01B2                120                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
000010C0  BA7C 0040                121                          CMP         #$40,D5
000010C4  6700 01AA                122                          BEQ         INVALID_ADDR_INPUT
000010C8  BA7C 0046                123                          CMP         #$46,D5
000010CC  6E00 01A2                124                          BGT         INVALID_ADDR_INPUT   
000010D0                           125                          ; Convert ascii to hex for that digit.
000010D0  0445 0030                126                          SUB         #$30,D5   ;
000010D4  BA7C 000A                127                          CMP         #$A,D5
000010D8  6D00 0004                128                          BLT         DIG_CONV_DONE_1 ; Necessary to convert some ASCII values.
000010DC  5F05                     129                          SUB.B       #7, D5                      ; TODO: errors for invalid ASCII values.
000010DE                           130                  
000010DE  DC45                     131  DIG_CONV_DONE_1         ADD.W       D5,D6
000010E0  B27C 0001                132                          CMP         #1,D1
000010E4  6700 01CA                133                          BEQ         CONVERSION_DONE
000010E8                           134                  
000010E8                           135                          ;second digit
000010E8  7A00                     136                          MOVE.L      #$00000000,D5
000010EA  1A21                     137                          MOVE.B      -(A1),D5
000010EC  BA7C 0030                138                          CMP         #$30,D5
000010F0  6D00 017E                139                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
000010F4  BA7C 0040                140                          CMP         #$40,D5
000010F8  6700 0176                141                          BEQ         INVALID_ADDR_INPUT
000010FC  BA7C 0046                142                          CMP         #$46,D5
00001100  6E00 016E                143                          BGT         INVALID_ADDR_INPUT   
00001104  0445 0030                144                          SUB         #$30,D5
00001108  BA7C 000A                145                          CMP         #$A,D5            
0000110C  6D00 0004                146                          BLT         DIG_CONV_DONE_2    ;digit conversion done 1
00001110  5F05                     147                          SUB.B       #7, D5             ; if we have A or greater, then we need to subtract 1.
00001112                           148               
00001112  CAFC 0010                149  DIG_CONV_DONE_2         MULU.W      #$00000010,D5  ; this part adds $10 * (2nd digit) to our running total.
00001116  DC45                     150                          ADD.W       D5,D6 
00001118                           151                    
00001118  B27C 0002                152                          CMP         #2,D1
0000111C  6700 0192                153                          BEQ         CONVERSION_DONE
00001120                           154                  
00001120                           155                          ;third digit
00001120  7A00                     156                          MOVE.L      #$00000000,D5
00001122  1A21                     157                          MOVE.B      -(A1),D5
00001124  BA7C 0030                158                          CMP         #$30,D5
00001128  6D00 0146                159                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
0000112C  BA7C 0040                160                          CMP         #$40,D5
00001130  6700 013E                161                          BEQ         INVALID_ADDR_INPUT
00001134  BA7C 0046                162                          CMP         #$46,D5
00001138  6E00 0136                163                          BGT         INVALID_ADDR_INPUT   
0000113C  0445 0030                164                          SUB         #$30,D5
00001140  BA7C 000A                165                          CMP         #$A,D5
00001144  6D00 0004                166                          BLT         DIG_CONV_DONE_3 
00001148  5F05                     167                          SUB.B       #7, D5
0000114A                           168                  
0000114A  CAFC 0100                169  DIG_CONV_DONE_3         MULU.W      #$00000100,D5
0000114E  DC45                     170                          ADD.W       D5,D6 
00001150                           171      
00001150  B27C 0003                172                          CMP         #3,D1
00001154  6700 015A                173                          BEQ         CONVERSION_DONE
00001158                           174                  
00001158                           175                          ;fourth digit
00001158  7A00                     176                          MOVE.L      #$00000000,D5
0000115A  1A21                     177                          MOVE.B      -(A1),D5
0000115C  BA7C 0030                178                          CMP         #$30,D5
00001160  6D00 010E                179                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
00001164  BA7C 0040                180                          CMP         #$40,D5
00001168  6700 0106                181                          BEQ         INVALID_ADDR_INPUT
0000116C  BA7C 0046                182                          CMP         #$46,D5
00001170  6E00 00FE                183                          BGT         INVALID_ADDR_INPUT   
00001174  0445 0030                184                          SUB         #$30,D5
00001178  BA7C 000A                185                          CMP         #$A,D5
0000117C  6D00 0004                186                          BLT         DIG_CONV_DONE_4
00001180  5F05                     187                          SUB.B       #7,D5
00001182                           188                  
00001182  CAFC 1000                189  DIG_CONV_DONE_4         MULU.W      #$00001000,D5
00001186  DC45                     190                          ADD.W       D5,D6 
00001188                           191      
00001188  B27C 0004                192                          CMP         #4,D1
0000118C  6700 0122                193                          BEQ         CONVERSION_DONE
00001190                           194                  
00001190                           195                          ;fifth digit
00001190  7A00                     196                          MOVE.L      #$00000000,D5
00001192  1A21                     197                          MOVE.B      -(A1),D5
00001194  BA7C 0030                198                          CMP         #$30,D5
00001198  6D00 00D6                199                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
0000119C  BA7C 0040                200                          CMP         #$40,D5
000011A0  6700 00CE                201                          BEQ         INVALID_ADDR_INPUT
000011A4  BA7C 0046                202                          CMP         #$46,D5
000011A8  6E00 00C6                203                          BGT         INVALID_ADDR_INPUT   
000011AC  0445 0030                204                          SUB         #$30,D5
000011B0  BA7C 000A                205                          CMP         #$A,D5
000011B4  6D00 0004                206                          BLT         DIG_CONV_DONE_5
000011B8  5F05                     207                          SUB.B       #$7, D5
000011BA                           208                  
000011BA  CAFC 0001                209  DIG_CONV_DONE_5         MULU.W      #$0001,D5
000011BE  DE45                     210                          ADD.W       D5,D7 
000011C0                           211  
000011C0  B27C 0005                212                          CMP         #5,D1
000011C4  6700 00EA                213                          BEQ         CONVERSION_DONE
000011C8                           214                  
000011C8                           215                          ;sixth digit
000011C8  7A00                     216                          MOVE.L      #$00000000,D5
000011CA  1A21                     217                          MOVE.B      -(A1),D5
000011CC  BA7C 0030                218                          CMP         #$30,D5
000011D0  6D00 009E                219                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
000011D4  BA7C 0040                220                          CMP         #$40,D5
000011D8  6700 0096                221                          BEQ         INVALID_ADDR_INPUT
000011DC  BA7C 0046                222                          CMP         #$46,D5
000011E0  6E00 008E                223                          BGT         INVALID_ADDR_INPUT   
000011E4  0445 0030                224                          SUB         #$30,D5
000011E8  BA7C 000A                225                          CMP         #$A,D5
000011EC  6D00 0004                226                          BLT         DIG_CONV_DONE_6
000011F0  5F05                     227                          SUB.B       #$7, D5
000011F2                           228                  
000011F2  CAFC 0010                229  DIG_CONV_DONE_6         MULU.W      #$0010,D5
000011F6  DE45                     230                          ADD.W       D5,D7
000011F8                           231      
000011F8  B27C 0006                232                          CMP         #6,D1
000011FC  6700 00B2                233                          BEQ         CONVERSION_DONE
00001200                           234                  
00001200                           235                          ;seventh digit
00001200  7A00                     236                          MOVE.L      #$00000000,D5
00001202  1A21                     237                          MOVE.B      -(A1),D5
00001204  BA7C 0030                238                          CMP         #$30,D5
00001208  6D00 0066                239                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
0000120C  BA7C 0040                240                          CMP         #$40,D5
00001210  6700 005E                241                          BEQ         INVALID_ADDR_INPUT
00001214  BA7C 0046                242                          CMP         #$46,D5
00001218  6E00 0056                243                          BGT         INVALID_ADDR_INPUT   
0000121C  0445 0030                244                          SUB         #$30,D5
00001220  BA7C 000A                245                          CMP         #$A,D5
00001224  6D00 0004                246                          BLT         DIG_CONV_DONE_7
00001228  5F05                     247                          SUB.B       #7, D5
0000122A                           248                  
0000122A  CAFC 0100                249  DIG_CONV_DONE_7         MULU.W      #$0100,D5
0000122E  DE45                     250                          ADD.W       D5,D7
00001230                           251      
00001230  B27C 0007                252                          CMP         #7,D1
00001234  6700 007A                253                          BEQ         CONVERSION_DONE
00001238                           254                  
00001238                           255                          ;eighth digit
00001238  7A00                     256                          MOVE.L      #$00000000,D5
0000123A  1A21                     257                          MOVE.B      -(A1),D5
0000123C  BA7C 0030                258                          CMP         #$30,D5
00001240  6D00 002E                259                          BLT         INVALID_ADDR_INPUT ;comes  from inputting invalid characters
00001244  BA7C 0040                260                          CMP         #$40,D5
00001248  6700 0026                261                          BEQ         INVALID_ADDR_INPUT
0000124C  BA7C 0046                262                          CMP         #$46,D5
00001250  6E00 001E                263                          BGT         INVALID_ADDR_INPUT   
00001254  0445 0030                264                          SUB         #$30,D5
00001258  BA7C 000A                265                          CMP         #$A,D5
0000125C  6D00 0004                266                          BLT         DIG_CONV_DONE_8
00001260  5F05                     267                          SUB.B       #7, D5
00001262                           268                  
00001262  CAFC 1000                269  DIG_CONV_DONE_8         MULU.W      #$1000,D5
00001266  DE45                     270                          ADD.W       D5,D7
00001268                           271      
00001268  B27C 0008                272                          CMP         #8,D1
0000126C  6700 0042                273                          BEQ         CONVERSION_DONE    ;the input was valid and we are done with the conversion
00001270                           274                  
00001270  43F9 00001636            275  INVALID_ADDR_INPUT      LEA         INVALID_ADDR_MSG,A1    ;tell the user the address was invalid and prompt input again.
00001276  103C 000E                276                          MOVE.B      #14,D0
0000127A  4E4F                     277                          TRAP        #15
0000127C                           278                          
0000127C  6100 FDB6                279                          BSR         TAKE_USER_INPUT
00001280                           280                          
00001280  43F9 0000166C            281  INVALID_END_ADDR        LEA         INVALID_END_ADDR_MSG,A1
00001286  103C 000E                282                          MOVE.B      #14,D0
0000128A  4E4F                     283                          TRAP        #15
0000128C                           284                          
0000128C  6100 FDA6                285                          BSR         TAKE_USER_INPUT
00001290                           286                          
00001290  43F9 000016BD            287  INVALID_ADDR_LOW        LEA         INVALID_ADDR_L_MSG,A1    ;tell the user the address was invalid and prompt input again.
00001296  103C 000E                288                          MOVE.B      #14,D0
0000129A  4E4F                     289                          TRAP        #15
0000129C                           290                          
0000129C  6100 FD96                291                          BSR         TAKE_USER_INPUT
000012A0                           292  
000012A0  43F9 000016FD            293  INVALID_ADDR_HIGH       LEA         INVALID_ADDR_H_MSG,A1    ;tell the user the address was invalid and prompt input again.
000012A6  103C 000E                294                          MOVE.B      #14,D0
000012AA  4E4F                     295                          TRAP        #15
000012AC                           296                          
000012AC  6100 FD86                297                          BSR         TAKE_USER_INPUT
000012B0                           298                 
000012B0  E18F                     299  CONVERSION_DONE         LSL.L       #8,D7   ; Prepare for concatenation
000012B2  E18F                     300                          LSL.L       #8,D7   ; Got to perform the same operation twice to get it all the way to the left
000012B4  DE46                     301                          ADD.W       D6,D7  ; concatenate the two data registers into one value
000012B6                           302                          
000012B6  BEBC 00003000            303                          CMP.L       #MIN_ADDRESS,D7
000012BC  6DD2                     304                          BLT         INVALID_ADDR_LOW ;Not a valid address-- too low.
000012BE                           305                          
000012BE  BEBC 0FFF0000            306                          CMP.L       #MAX_ADDRESS,D7
000012C4  6EDA                     307                          BGT         INVALID_ADDR_HIGH  ;Not a valid address-- too high.
000012C6                           308                          
000012C6  0C43 0001                309  VALID_ADDR              CMPI        #1,D3
000012CA                           310                          
000012CA  6700 0006                311                          BEQ         SET_START_ADDR
000012CE  6100 0008                312                          BSR         SET_END_ADDR              
000012D2                           313                                                 
000012D2  2A47                     314  SET_START_ADDR          MOVEA.L     D7,A5  ;when a valid start address is inputted, store and ask the user for an end address.
000012D4  6100 FD4A                315                          BSR         TAKE_USER_IN_E
000012D8                           316  
000012D8  BE8D                     317  SET_END_ADDR            CMP.L       A5,D7    ;if end address is lower than start address, we get an error.
000012DA  6DA4                     318                          BLT         INVALID_END_ADDR           
000012DC                           319                          
000012DC  2C47                     320                          MOVEA.L     D7,A6  ;when a valid start address is inputted, store and ask the user for an end address.
000012DE  6100 0002                321                          BSR         BEGIN_READ
000012E2                           322                          
000012E2  284D                     323  BEGIN_READ              MOVEA.L      A5,A4 ; keep track of address to print with A4. TODO: could also add this value to the display buffer.
000012E4  33DD 000017A0            324                          MOVE.W      (A5)+,CURRENT_WORD ;look at the first instruction word at the starting address.
000012EA  6100 0002                325                          BSR         PREPARE_DISPLAY
000012EE                           326  
000012EE                           327  *------------------- Add to display buffer -------------------
000012EE                           328  ;At this point A5 is a valid start address and A6 is a valid end address.
000012EE                           329  ;TODO: prepare the display buffer
000012EE  6100 0030                330  PREPARE_DISPLAY         BSR         READ_CURRENT_OP    ;TEMP (though we might still call this after the display buffer is prepared)                       
000012F2                           331                 
000012F2                           332  *------------------- Move address pointer for data reading -------------------
000012F2                           333  ; This method is specifically for reading the next OPword.
000012F2  6100 0014                334  GO_TO_NEXT_OP           BSR         CHECK_DONE_READING
000012F6                           335                           
000012F6  4279 000017A0            336  CONFIRMED_NEXT_OP       CLR         CURRENT_WORD
000012FC  284D                     337                          MOVEA.L      A5,A4 ; keep track of address to print with A4. 
000012FE  33DD 000017A0            338                          MOVE.W      (A5)+,CURRENT_WORD
00001304  6100 001A                339                          BSR         READ_CURRENT_OP
00001308                           340  *------------------- Print display buffer -------------------
00001308                           341  *------------------- Check if end of data -------------------
00001308  BACE                     342  CHECK_DONE_READING      CMPA        A6,A5       ; TODO: this comparison is not sufficient, because it will say that $8000 is less than $7000 (since $8000 is negative.)
0000130A  6DEA                     343                          BLT         CONFIRMED_NEXT_OP
0000130C  6100 0002                344                          BSR         DONE_READING
00001310                           345  *------------------- Ask user for input -------------------
00001310  43F9 0000173E            346  DONE_READING            LEA         DONE_READING_MSG,A1 ; when we reach the end address, say so and halt the program. TODO: ask user whether we want to read the data again.
00001316  103C 000E                347                          MOVE.B      #14,D0
0000131A  4E4F                     348                          TRAP        #15
0000131C  4EF8 1004                349                          JMP         STOP
00001320                           350  *################## END IO  #####################################
00001320                           351  *################## BEGIN OPCODE ##########################
00001320                           352  *** OPcode Subroutines are kept here ***
00001320                           353  
00001320                           354  *------------------- Read current OPcode -------------------
00001320                           355  ; By this point, CURRENT_WORD should store a potential beginning of an instruction, so we should not increment A5.
00001320  6100 0002                356  READ_CURRENT_OP         BSR         CHECK_CONSTANTS
00001324                           357                          ;CLR         D3  
00001324                           358                          ;CLR         D4
00001324                           359                          ;MOVE.W          
00001324                           360                          ;ANDI.W      #FILT_2BIT_1,D3 ; and A5 (current address we are reading) should have just been incremented to a point immediately after that word.
00001324                           361   
00001324                           362  *------------------ Check current word for constants---------
00001324                           363  ; By this point, the current word should store a potential beginning of an instruction                   
00001324  6100 0012                364  CHECK_CONSTANTS         BSR         CHECK_NOP
00001328                           365  
00001328  0C79 4E70 000017A0       366  CHECK_RESET             CMP         #RESET_CODE,(CURRENT_WORD) ; TODO: test that this is correct syntax
00001330  6600 0006                367                          BNE         CHECK_NOP
00001334                           368                         
00001334  4EF8 1004                369  RESET_FOUND             JMP         STOP  ;TODO: case for reset found    
00001338                           370   
00001338  0C79 4E71 000017A0       371  CHECK_NOP               CMP         #NOP_CODE,(CURRENT_WORD) ; TODO: test that this is correct syntax
00001340  6600 0042                372                          BNE         CHECK_STOP
00001344                           373  
00001344                           374  ;NOTE: this SR is temporary. Once we have the display buffer, it will work differently.                 
00001344  43F9 0000157B            375  NOP_FOUND               LEA         DOLLAR,A1     ; '$'
0000134A  103C 000E                376                          MOVE.B      #14,D0
0000134E  4E4F                     377                          TRAP        #15
00001350                           378                  
00001350  220C                     379                          MOVE.L      A4,D1 ;display the address NOP was found at
00001352  143C 0010                380                          MOVE.B      #16,D2
00001356  103C 000F                381                          MOVE.B      #15,D0
0000135A  4E4F                     382                          TRAP        #15
0000135C                           383  
0000135C  43F9 00001579            384                          LEA         SPACE,A1      ; ' '
00001362  103C 000E                385                          MOVE.B      #14,D0      
00001366  4E4F                     386                          TRAP        #15
00001368                           387  
00001368  43F9 00001760            388                          LEA         NOP_MSG,A1    ; 'NOP'
0000136E  103C 000E                389                          MOVE.B      #14,D0
00001372  4E4F                     390                          TRAP        #15
00001374                           391                          
00001374  43F9 00001576            392                          LEA         RETURN,A1    ; (return)
0000137A  103C 000E                393                          MOVE.B      #14,D0
0000137E  4E4F                     394                          TRAP        #15
00001380                           395                 
00001380  6100 FF70                396                          BSR         GO_TO_NEXT_OP
00001384                           397                          
00001384  0C79 4E72 000017A0       398  CHECK_STOP              CMP         #STOP_CODE,(CURRENT_WORD)
0000138C  6600 0006                399                          BNE         CHECK_NON_CONSTANTS
00001390                           400  
00001390  4EF8 1004                401  STOP_FOUND              JMP         STOP  ;TODO: case for stop found               
00001394                           402  
00001394                           403  ;TODO: add cases for rest of valid constant OPcodes here
00001394                           404  
00001394                           405  *----------------- Check current word for non-constants---------
00001394                           406  ;NOTE: we currently know that CURRENT_WORD is not a constant by the time we reach this SR.
00001394                           407  
00001394  4243                     408  CHECK_NON_CONSTANTS     CLR         D3
00001396  6100 0002                409                          BSR         CHECK_MOVE_B
0000139A                           410                          
0000139A  3639 000017A0            411  CHECK_MOVE_B            MOVE.W      CURRENT_WORD,D3
000013A0  0243 F000                412                          ANDI.W      #FILT_NIB_1,D3
000013A4  B67C 1000                413                          CMP         #CONST_MOVE_B,D3
000013A8  6600 006E                414                          BNE         CHECK_MOVE_W
000013AC                           415                          
000013AC                           416  ;NOTE: this SR is temporary. will be different with display buffer.
000013AC  43F9 0000157B            417  MOVE_B_FOUND            LEA         DOLLAR,A1     ; '$'
000013B2  103C 000E                418                          MOVE.B      #14,D0
000013B6  4E4F                     419                          TRAP        #15
000013B8                           420                  
000013B8  220C                     421                          MOVE.L      A4,D1 ;display the address MOVE.B was found at
000013BA  143C 0010                422                          MOVE.B      #16,D2
000013BE  103C 000F                423                          MOVE.B      #15,D0
000013C2  4E4F                     424                          TRAP        #15
000013C4                           425  
000013C4  43F9 00001579            426                          LEA         SPACE,A1         ; ' '
000013CA  103C 000E                427                          MOVE.B      #14,D0      
000013CE  4E4F                     428                          TRAP        #15
000013D0                           429  
000013D0                           430                          ;FROM TEST:
000013D0                           431                          ;MOVE.B #10,D0
000013D0                           432                          ;MOVE.B D1, D1
000013D0                           433                          ;MOVE.B D1, $10000000
000013D0                           434                          ;MOVE.B D1, $1000
000013D0                           435                          
000013D0                           436                          ;TODO: at this point, need to print more information (parsed by EA, probably)
000013D0                           437                          ; now that we have a move instruction, we set our EA variables accordingly:
000013D0  6100 0076                438                          BSR         READ_DEST_REG      ; EA will set CURRENT_DEST_REG to the correct register.
000013D4  6100 0090                439                          BSR         READ_DEST_MODE     ; EA will set CURRENT_DEST_MD to the correct mode.
000013D8  6100 00A8                440                          BSR         READ_SOURCE_MODE   ; EA will set CURRENT_SRC_MD to the correct mode.
000013DC  6100 00C0                441                          BSR         READ_SOURCE_REG    ; EA will set CURRENT_SRC_REG to the correct register.
000013E0                           442                          
000013E0                           443                          ;TEMP
000013E0  43F9 0000157B            444                          LEA         DOLLAR,A1     ; '$'
000013E6  103C 000E                445                          MOVE.B      #14,D0
000013EA  4E4F                     446                          TRAP        #15
000013EC                           447                          ;TEMP
000013EC                           448                          
000013EC                           449                          ; TODO: error checking first
000013EC                           450                          ;
000013EC                           451                          ; possible errors:
000013EC                           452                          ;       CURRENT_DEST_MD = CONST_IMMEDIATE_REG (immediate data cannot be a destination)
000013EC                           453                          ;       CURRENT_SRC_MD  = CONST_ADDR_REG_MD   (byte is not a valid size for this move)
000013EC                           454                          ;       CURRENT_DEST_MD = CONST_ADDR_REG_MD   (byte is not a valid size, although we should be using MOVEA at this point, not MOVE.)
000013EC                           455                          ;       TODO: figure out other possible errors.
000013EC                           456                          
000013EC                           457                          ; after we confirm that there are no errors, we begin sending information about the MOVE instruction to the display.
000013EC                           458                          
000013EC  43F9 00001769            459                          LEA         MOVE_B_MSG,A1    ; 'MOVE.B'
000013F2  103C 000E                460                          MOVE.B      #14,D0
000013F6  4E4F                     461                          TRAP        #15
000013F8                           462                          
000013F8  43F9 00001579            463                          LEA         SPACE,A1         ; ' '
000013FE  103C 000E                464                          MOVE.B      #14,D0      
00001402  4E4F                     465                          TRAP        #15
00001404                           466                          
00001404                           467                          ; TODO: once we have the four values, proceed to parse the instruction accordingly.
00001404  6100 00B2                468                          BSR         DISPLAY_SOURCE  ; Tell EA to parse and display the source 
00001408                           469                          
00001408  43F9 00001576            470                          LEA         RETURN,A1    ; (return)
0000140E  103C 000E                471                          MOVE.B      #14,D0
00001412  4E4F                     472                          TRAP        #15
00001414                           473                 
00001414  6100 FEDC                474                          BSR         GO_TO_NEXT_OP
00001418                           475                          
00001418  3639 000017A0            476  CHECK_MOVE_W            MOVE.W      CURRENT_WORD,D3
0000141E  0243 F000                477                          ANDI.W      #FILT_NIB_1,D3
00001422  B67C 3000                478                          CMP         #CONST_MOVE_W,D3
00001426  6600 0006                479                          BNE         CHECK_MOVE_L
0000142A                           480                          
0000142A  4EF8 1004                481  MOVE_W_FOUND            JMP         STOP ;TODO
0000142E                           482                          
0000142E  3639 000017A0            483  CHECK_MOVE_L            MOVE.W      CURRENT_WORD,D3
00001434  0243 F000                484                          ANDI.W      #FILT_NIB_1,D3
00001438  B67C 2000                485                          CMP         #CONST_MOVE_L,D3
0000143C                           486                          ;BNE         CHECK_MOVE_W
0000143C  4EF8 1004                487                          JMP         STOP ;TODO: keep checking for more possible instructions
00001440                           488                          
00001440  4EF8 1004                489  MOVE_L_FOUND            JMP         STOP ;TODO
00001444                           490                          
00001444                           491  
00001444  4EF8 1004                492                          JMP         STOP    ;TODO: CURRENT_WORD still holds current possible 16 bit instruction, so read it for current word.        
00001448                           493  
00001448                           494                         
00001448                           495  
00001448                           496                                                              
00001448                           497         
00001448                           498                  ;TODO: process for reading hex instructions (after the first instruction):
00001448                           499                  ;           1) Go to start of instruction reading loop, passing in the address of next instruction.
00001448                           500                  ;           2) Store a word (16 bits) from that address.
00001448                           501                  ;           3) Read the first 4 bits of the word using a filter.
00001448                           502                  ;           4) branch to one of the following paths based on these bits:
00001448                           503                  ;               a) 0000: Read the next 3 bits (i.e., the destination mode). Branch:
00001448                           504                  ;                   i.   000: Read the bits at 0000 0000 XXXX XXXX (may want to make this filter) Branch:
00001448                           505                  ;                       1) 00 111 100: ORI TO CCR (need to read data, I think)
00001448                           506                  ;                       2) 01 111 100: ORI TO SR (need to read data, I think)
00001448                           507                  ;                       3) (default) ORI. Now, read and store:
00001448                           508                  ;                           SIZE:       0000 0000 XX00 0000 (need to make this filter)
00001448                           509                  ;                           MODE:       0000 0000 00XX X000 (need to make this filter)
00001448                           510                  ;                           REGISTER:   0000 0000 0000 0XXX (need to make this filter)
00001448                           511                  ;                           only mandatory additional data is the immediate data.
00001448                           512                  ;                   ii.  001: Read the bits at 0000 0000 XXXX XXXX (may want to make this filter) Branch:
00001448                           513                  ;                       1) 00 111 100: ANDI TO CCR (need to read data, I think)
00001448                           514                  ;                       2) 01 111 100: ANDI TO SR (need to read data, I think)
00001448                           515                  ;                       3) (default) ANDI. Now, read and store:
00001448                           516                  ;                           SIZE:       0000 0000 XX00 0000 (need to make this filter)
00001448                           517                  ;                           MODE:       0000 0000 00XX X000 (need to make this filter)
00001448                           518                  ;                           REGISTER:   0000 0000 0000 0XXX (need to make this filter)
00001448                           519                  ;                           only mandatory additional data is the immediate data.
00001448                           520                  ;                   iii. 101: Read the bits at 0000 0000 XXXX XXXX (may want to make this filter) Branch:
00001448                           521                  ;                       1) 00 111 100: EORI TO CCR (need to read data, I think)
00001448                           522                  ;                       2) 01 111 100: EORI TO SR (need to read data, I think)
00001448                           523                  ;                       3) (default) EORI. Now, read and store:
00001448                           524                  ;                           SIZE:       0000 0000 XX00 0000 (need to make this filter)
00001448                           525                  ;                           MODE:       0000 0000 00XX X000 (FILT_SRC_MODE)
00001448                           526                  ;                           REGISTER:   0000 0000 0000 0XXX (FILT_SRC_REG)
00001448                           527                  ;                           only mandatory additional data is the immediate data.
00001448                           528                  ;                   iv.  011: ADDI. Now read and store:
00001448                           529                  ;                           SIZE:       0000 0000 XX00 0000 (need to make this filter)
00001448                           530                  ;                           MODE:       0000 0000 00XX X000 (FILT_SRC_MODE)
00001448                           531                  ;                           REGISTER:   0000 0000 0000 0XXX (FILT_SRC_REG)
00001448                           532                  ;                           only mandatory additional data is the immediate data.
00001448                           533                  ;                   v.   010: SUBI. Now read and store:
00001448                           534                  ;                           SIZE:       0000 0000 XX00 0000 (need to make this filter)
00001448                           535                  ;                           MODE:       0000 0000 00XX X000 (FILT_SRC_MODE)
00001448                           536                  ;                           REGISTER:   0000 0000 0000 0XXX (FILT_SRC_REG)
00001448                           537                  ;                           only mandatory additional data is the immediate data.
00001448                           538                  ;                   vi.  110: CMPI. Now read and store:
00001448                           539                  ;                           SIZE:       0000 0000 XX00 0000 (need to make this filter)
00001448                           540                  ;                           MODE:       0000 0000 00XX X000 (FILT_SRC_MODE)
00001448                           541                  ;                           REGISTER:   0000 0000 0000 0XXX (FILT_SRC_REG)
00001448                           542                  ;                           only mandatory additional data is the immediate data.
00001448                           543                  ;                   vii. 100: BTST, BCHG, BCLR, BSET (TODO: expand this section if we need these OPcodes)
00001448                           544                  ;                   viii.(default): BTST, BCHG, BCLR, BSET (with data register)(TODO: expand this section if we need these OPcodes)
00001448                           545                  ;               b) 0001: (MOVE.B). Now read and store:
00001448                           546                  ;                           DESTINATION REGISTER: 0000 XXX0 0000 0000 (FILT_DEST_REG)
00001448                           547                  ;                           DESTINATION MODE:     0000 000X XX00 0000 (FILT_DEST_MODE)
00001448                           548                  ;                           SOURCE MODE:          0000 0000 00XX X000 (FILT_SCR_MODE)
00001448                           549                  ;                           SOURCE REGISTER:      0000 0000 0000 0XXX (FILT_SRC_REG)
00001448                           550                  ;                           The modes (and maybe register) will tell us whether we need to read additional data for this MOVE.
00001448                           551                  ;               c) 0011: (MOVE.W). Now read and store:
00001448                           552                  ;                           DESTINATION REGISTER: 0000 XXX0 0000 0000 (FILT_DEST_REG)
00001448                           553                  ;                           DESTINATION MODE:     0000 000X XX00 0000 (FILT_DEST_MODE)
00001448                           554                  ;                           SOURCE MODE:          0000 0000 00XX X000 (FILT_SCR_MODE)
00001448                           555                  ;                           SOURCE REGISTER:      0000 0000 0000 0XXX (FILT_SRC_REG)
00001448                           556                  ;                           The modes (and maybe register) will tell us whether we need to read additional data for this MOVE.
00001448                           557                  ;               d) 0010: (MOVE.L). Now read and store:
00001448                           558                  ;                           DESTINATION REGISTER: 0000 XXX0 0000 0000 (FILT_DEST_REG)
00001448                           559                  ;                           DESTINATION MODE:     0000 000X XX00 0000 (FILT_DEST_MODE)
00001448                           560                  ;                           SOURCE MODE:          0000 0000 00XX X000 (FILT_SCR_MODE)
00001448                           561                  ;                           SOURCE REGISTER:      0000 0000 0000 0XXX (FILT_SRC_REG)
00001448                           562                  ;                           The modes (and maybe register) will tell us whether we need to read additional data for this MOVE.
00001448                           563                  ;               e) 0100: Read the bits at 0000 XXXX 0000 0000 (need filter) Branch:
00001448                           564                  ;                   i.      0000: Read the bits at 0000 0000 XX00 0000 (need filter) Branch:
00001448                           565                  ;                               1. 11: MOVE from SR. (TODO)
00001448                           566                  ;                               2. (DEFAULT) NEGX. (the two bits are size) (TODO)
00001448                           567                  ;                   ii.     0100: Read the bits at 0000 0000 XX00 0000 (need filter) Branch:
00001448                           568                  ;                               1. 11 MOVE to CCR. (TODO)
00001448                           569                  ;                               2. (DEFAULT) NEG. (the two bits are size) (TODO)
00001448                           570                  ;                   iii.    0110: Read the bits at 0000 0000 XX00 0000 (need filter) Branch:
00001448                           571                  ;                               1. 11 MOVE to SR. (TODO)
00001448                           572                  ;                               2. (DEFAULT) NOT. (the two bits are size) (TODO)
00001448                           573                  ;                   iv.     0010: CLR. (TODO)
00001448                           574                  ;                    v.     1000: (EXT, NBCD, SWAP, PEA, MOVEM (dir 0)) (TODO)
00001448                           575                  ;                   vi.     1010: Check the bits at 0000 XX00 0000 0000 (need filter) Branch:
00001448                           576                  ;                           1. 11: check the bits at 0000 00XX XXXX XXXX (need filter) Branch:
00001448                           577                  ;                               a. 11 1100: ILLEGAL (TODO)
00001448                           578                  ;                               b. (default) TAS (TODO)
00001448                           579                  ;                           2. (default) TST (TODO)
00001448                           580                  ;                  vii.     1110: (TRAP, LINK, UNLK, MOVE USP, RESET, NOP, STOP, RTE, RTS, TRAPV, RTR, JSR, JMP) (TODO)
00001448                           581                  ;                 viii.     (DEFAULT): (MOVEM, LEA, CHK,) (TODO)    
00001448                           582                  ;               f) 0101: (ADDQ, SUBQ, Scc, DBcc): Read the bits at 0000 0000 XX00 0000 (need filter) Branch:
00001448                           583                  ;                    i. 11: Read the bit at 0000 000X 0000 0000 (need filter) Branch:
00001448                           584                  ;                           1. 0: ADDQ (TODO)
00001448                           585                  ;                           2. 1: SUBQ (TODO)
00001448                           586                  ;                   ii. (default) (bits are size) read the bits at 0000 00XX X000 (FILT_SRC_MODE). Branch:
00001448                           587                  ;                           1. 001: DBCC (TODO)
00001448                           588                  ;                           2. (default): Scc (TODO)
00001448                           589                  ;               g) 0110: Read the bit at 0000 XXXX 0000 0000 (need filter) Branch:
00001448                           590                  ;                    i. 0000: BRA (TODO)
00001448                           591                  ;                   ii. 0001: BSR (TODO)
00001448                           592                  ;                  iii. (default) Bcc (TODO)
00001448                           593                  ;               h) 0111: MOVEQ (TODO)
00001448                           594                  ;               i) 1000: (DIVU, DIVS, SBCD, OR) (TODO)
00001448                           595                  ;               j) 1001: (SUB, SUBX, SUBA) (TODO)
00001448                           596                  ;               k) 1011: (EOR, CMPM, CMP, CMPA) (TODO)
00001448                           597                  ;               l) 1100: (MULU, MULS, ABCD, EXG, AND) (TODO)
00001448                           598                  ;               m) 1101: (ADD, ADDX, ADDA) (TODO)
00001448                           599                  ;               n) 1110: (ASd, LSd, ROXd, ROd, ASd, LSd, ROXd, ROd) (TODO)
00001448                           600                  ;               o) (default) The code is invalid. Not yet sure what we do in this case.
00001448                           601                  ;   
00001448                           602                  ;   
00001448                           603                  ;
00001448                           604                  
00001448                           605                  ;TODO: Use AND operations with filters to create values which can be
00001448                           606                  ;      checked against constants to narrow down OPcodes.
00001448                           607                  
00001448                           608                  ;TODO: Since it will take a while to decode every possible OPcode, we
00001448                           609                  ;      should first have a default "Error" subroutine which the program
00001448                           610                  ;      branches to once all other possibilities have been ruled out.
00001448                           611  
00001448                           612  *###################### END OPCODE ##################################
00001448                           613  *###################### BEGIN EA ##################################
00001448                           614  *** EA Subroutines are kept here ***
00001448                           615  *----------------------Check the destination register of the current word.-------------
00001448  4244                     616  READ_DEST_REG           CLR         D4
0000144A                           617                          ;CLR         CURRENT_DEST_REG
0000144A  3839 000017A0            618                          MOVE.W      CURRENT_WORD,D4
00001450  0244 0E00                619                          ANDI.W      #FILT_DEST_REG,D4        ; turn D4 into 0000 XXX0 0000 0000
00001454  E04C                     620                          LSR.W       #8,D4                   ; turn D4 into 0000 0000 0000 0XXX
00001456  E24C                     621                          LSR.W       #1,D4   ;9 would be invalid, so we shift 8, then 1
00001458  13C4 000017A7            622                          MOVE.B      D4,CURRENT_DEST_REG
0000145E  13C4 000017A3            623                          MOVE.B      D4,CURRENT_REG
00001464  4E75                     624                          RTS
00001466                           625  
00001466                           626  *----------------------Check the destination mode of the current word.-------------
00001466                           627  *(assuming the destination is where it would be in MOVE).
00001466  4244                     628  READ_DEST_MODE          CLR         D4
00001468                           629                          ;CLR         CURRENT_DEST_MD
00001468  3839 000017A0            630                          MOVE.W      CURRENT_WORD,D4
0000146E  0244 01A0                631                          ANDI.W      #FILT_DEST_MD,D4        ; turn D4 into 0000 000X XX00 0000
00001472  EC4C                     632                          LSR.W       #6,D4                   ; turn D4 into 0000 0000 0000 0XXX
00001474  13C4 000017A6            633                          MOVE.B      D4,CURRENT_DEST_MD
0000147A  13C4 000017A2            634                          MOVE.B      D4,CURRENT_MD
00001480  4E75                     635                          RTS
00001482                           636  
00001482                           637  ;By this point, CURRENT WORD holds the first 16 bits of an instruction we are looking at.
00001482                           638  ;(we should already know the OPcode by this point, so this will be called by various OPcode subroutines.)
00001482                           639  *---------------------- Check the source mode of the current word.--------------------
00001482                           640  *(assuming the source is where it would be in MOVE).
00001482  4244                     641  READ_SOURCE_MODE        CLR         D4
00001484  3839 000017A0            642                          MOVE.W      CURRENT_WORD,D4
0000148A  0244 0038                643                          ANDI.W      #FILT_SRC_MD,D4                 ; turn source mode into 0000 0000 00XX X000
0000148E  E64C                     644                          LSR.W       #3,D4                           ; turn source mode into 0000 0000 0000 0XXX
00001490  13C4 000017A4            645                          MOVE.B      D4,CURRENT_SRC_MD
00001496  13C4 000017A2            646                          MOVE.B      D4,CURRENT_MD
0000149C  4E75                     647                          RTS
0000149E                           648                          
0000149E                           649  *----------------------Check the source register of the current word.-----------------
0000149E  4244                     650  READ_SOURCE_REG         CLR         D4
000014A0                           651                          ;CLR         CURRENT_SRC_REG
000014A0  3839 000017A0            652                          MOVE.W      CURRENT_WORD,D4
000014A6  0244 0007                653                          ANDI.W      #FILT_SRC_REG,D4        ; turn D4 into 0000 0000 0000 0XXX. (no need for LSR in this case.)
000014AA  13C4 000017A5            654                          MOVE.B      D4,CURRENT_SRC_REG
000014B0  13C4 000017A3            655                          MOVE.B      D4,CURRENT_REG
000014B6  4E75                     656                          RTS
000014B8                           657                        
000014B8                           658  *----------------------Display the source for the current instruction.-----------------
000014B8                           659  *by this point, error checking should already be done and CURRENT_SRC_MD and CURRENT_SRC_REG should have the data we need.
000014B8  13F9 000017A4 000017A2   660  DISPLAY_SOURCE          MOVE.B      CURRENT_SRC_MD,CURRENT_MD
000014C2  13F9 000017A5 000017A3   661                          MOVE.B      CURRENT_SRC_REG,CURRENT_REG    ; necessary for some cases, like absolute addressing or immediate data.
000014CC  6100 0002                662                          BSR         CHECK_DATA_REG_MD       
000014D0                           663                          
000014D0                           664  *-----------------------Mode checks (for displaying)---------
000014D0                           665  *these do not care whether the mode is for source or destination.
000014D0  0C79 0000 000017A2       666  CHECK_DATA_REG_MD       CMP         #CONST_DATA_REG_MD,CURRENT_MD   ; check for CURRENT_MD = ...0000
000014D8  6600 001C                667                          BNE         CHECK_ADDR_REG_MD
000014DC                           668                          ;case for source mode is data register mode.
000014DC                           669                         
000014DC                           670                          ;TEMP. should send some instruction to display buffer, instead.
000014DC  43F9 0000177E            671                          LEA         MSG_D,A1               ;print out 'D'
000014E2  103C 000E                672                          MOVE.B      #14,D0
000014E6  4E4F                     673                          TRAP        #15
000014E8                           674                          
000014E8  43F9 000017A5            675                          LEA         CURRENT_SRC_REG,A1      ;print out the number of the data register.
000014EE  103C 000E                676                          MOVE.B      #14,D0
000014F2  4E4F                     677                          TRAP        #15
000014F4                           678                          
000014F4  4E75                     679                          RTS
000014F6                           680                          
000014F6  0C79 0001 000017A2       681  CHECK_ADDR_REG_MD       CMP         #CONST_ADDR_REG_MD,CURRENT_MD   ; check for CURRENT_MD = ...0001
000014FE  6600 0004                682                          BNE         CHECK_ADDR_IND_MD
00001502                           683                          ;TODO: case for source mode is address register mode.
00001502  4E75                     684                          RTS
00001504                           685                          
00001504  0C79 0002 000017A2       686  CHECK_ADDR_IND_MD       CMP         #CONST_ADDR_IND_MD,CURRENT_MD   ; check for CURRENT_MD = ...0010
0000150C  6600 0004                687                          BNE         CHECK_ADDR_INCR_MD
00001510                           688                          ;TODO: case for source mode is address indirect mode.
00001510  4E75                     689                          RTS
00001512                           690  
00001512  0C79 0003 000017A2       691  CHECK_ADDR_INCR_MD      CMP         #CONST_ADDR_INCR_MD,CURRENT_MD  ; check for CURRENT_MD = ...0011
0000151A  6600 0004                692                          BNE         CHECK_ADDR_DECR_MD
0000151E                           693                          ;TODO: case for source mode is address indirect postincrement mode.
0000151E  4E75                     694                          RTS
00001520                           695  
00001520  0C79 0004 000017A2       696  CHECK_ADDR_DECR_MD      CMP         #CONST_ADDR_DECR_MD,CURRENT_MD  ; check for CURRENT_MD = ...0100
00001528  6600 0004                697                          BNE         CHECK_ADDR_DISPLC_MD
0000152C                           698                          ;TODO: case for source mode is address indirect postdecrement mode.
0000152C  4E75                     699                          RTS     
0000152E                           700  
0000152E  0C79 0005 000017A2       701  CHECK_ADDR_DISPLC_MD    CMP         #CONST_ADDR_DISPLC_MD,CURRENT_MD  ; check for CURRENT_MD = ...0101
00001536  6600 0004                702                          BNE         CHECK_ADDR_INDEX_MD
0000153A                           703                          ;TODO: case for source mode is address with displacement mode.
0000153A  4E75                     704                          RTS    
0000153C                           705  
0000153C  0C79 0006 000017A2       706  CHECK_ADDR_INDEX_MD     CMP         #CONST_ADDR_INDEX_MD,CURRENT_MD  ; check for CURRENT_MD = ...0110
00001544  6600 0004                707                          BNE         CHECK_ADDR_MISC_MD
00001548                           708                          ;TODO: case for source mode is address with index mode.
00001548  4E75                     709                          RTS 
0000154A                           710                           
0000154A  0C79 0007 000017A2       711  CHECK_ADDR_MISC_MD      CMP         #CONST_ADDR_MISC_MD,CURRENT_MD  ; check for CURRENT_MD = ...0111
00001552                           712                          ;BNE         ;where to branch if it's not MISC? anything else should be impossible at this point. Maybe error?
00001552                           713                          ;TODO: case for source mode is miscellaneous
00001552                           714                          ;TODO: instead of immediate, branch in order to: CHECK_COUNTR_DISPLC_REG, CHECK_COUNTR_INDEX_REG, CHECK_ABS_SHORT_REG, 
00001552                           715                          ;       CHECK_ABS_LONG_REG, then CHECK_IMMEDIATE_REG 
00001552  6100 0004                716                          BSR         CHECK_IMMEDIATE_REG
00001556  4E75                     717                          RTS   
00001558                           718  *-----------------------Register checks (for displaying)---------
00001558                           719  *these do not care whether the register is for source or destination.
00001558                           720  *not for cases where reg is simply a number (like D5, A5, (A5), etc)
00001558  0C39 0004 000017A3       721  CHECK_IMMEDIATE_REG     CMP.B       #CONST_IMMEDIATE_REG,CURRENT_REG
00001560                           722                          ;TODO: BNE for not immediate
00001560  43F9 0000157F            723                          LEA         HASH,A1               ;print out '#'
00001566  103C 000E                724                          MOVE.B      #14,D0
0000156A  4E4F                     725                          TRAP        #15
0000156C                           726                          
0000156C                           727                          ;TODO: increment A5 by the proper amount (seems to be word) and print out the value we find.
0000156C  325D                     728                          MOVEA.W     (A5)+,A1
0000156E  103C 000E                729                          MOVE.B      #14,D0
00001572  4E4F                     730                          TRAP        #15
00001574                           731                          
00001574  4E75                     732                          RTS
00001576                           733                          
00001576                           734                          ;TODO: in this case, we need to use MOVE.?  (A5)+,X where ? is the correct size and X is some temp value for printing.
00001576                           735  
00001576                           736  *###################### END EA ##################################
00001576                           737  *############# BEGIN VARIABLES/CONSTANTS #########################
00001576                           738  *** Variables and Constants are kept here ***
00001576                           739  
00001576                           740  *output characters
00001576  =0000000D                741  CR                      EQU         $0D
00001576  =0000000A                742  LF                      EQU         $0A
00001576= 0D 0A 00                 743  RETURN                  DC.B        CR,LF,0
00001579= 20 00                    744  SPACE                   DC.B        ' ',0
0000157B= 24 00                    745  DOLLAR                  DC.B        '$',0
0000157D= 2C 00                    746  COMMA                   DC.B        ',',0
0000157F= 23 00                    747  HASH                    DC.B        '#',0
00001581                           748  
00001581                           749  *output messages
00001581                           750      ;TODO: consider also giving the user the range of valid start/end addresses
00001581= 50 6C 65 61 73 65 ...    751  START_ADDR_MSG          DC.B        'Please enter a starting hex address to read from.',CR,LF,0
000015B5= 50 6C 65 61 73 65 ...    752  END_ADDR_MSG            DC.B        'Please enter an ending hex address to read from.',CR,LF,0
000015E8                           753  
000015E8= 4E 6F 74 20 61 20 ...    754  INVALID_LEN_MSG         DC.B        'Not a valid length for input address.',CR,LF
0000160F= 50 6C 65 61 73 65 ...    755                          DC.B        'Please enter a valid-length address.',CR,LF,0
00001636= 4E 6F 74 20 61 20 ...    756  INVALID_ADDR_MSG        DC.B        'Not a valid address.',CR,LF
0000164C= 50 6C 65 61 73 65 ...    757                          DC.B        'Please enter a valid address.',CR,LF,0
0000166C= 4E 6F 74 20 61 20 ...    758  INVALID_END_ADDR_MSG    DC.B        'Not a valid end address.',CR,LF
00001686= 50 6C 65 61 73 65 ...    759                          DC.B        'Please enter an end address after the start address.',CR,LF,0
000016BD                           760                        
000016BD= 4E 6F 74 20 61 20 ...    761  INVALID_ADDR_L_MSG      DC.B        'Not a valid address (too low).',CR,LF
000016DD= 50 6C 65 61 73 65 ...    762                          DC.B        'Please enter a valid address.',CR,LF,0
000016FD                           763                          
000016FD= 4E 6F 74 20 61 20 ...    764  INVALID_ADDR_H_MSG      DC.B        'Not a valid address (too high).',CR,LF
0000171E= 50 6C 65 61 73 65 ...    765                          DC.B        'Please enter a valid address.',CR,LF,0
0000173E                           766                          
0000173E= 44 6F 6E 65 20 72 ...    767  DONE_READING_MSG        DC.B        'Done reading the program.',CR,LF,0
0000175A                           768  
0000175A                           769  *output instruction names (OPcodes)
0000175A                           770      ;constants
0000175A= 52 45 53 45 54 00        771  RESET_MSG               DC.B        'RESET',0
00001760= 4E 4F 50 00              772  NOP_MSG                 DC.B        'NOP',0
00001764= 53 54 4F 50 00           773  STOP_MSG                DC.B        'STOP',0
00001769                           774      ;moves
00001769= 4D 4F 56 45 2E 42 00     775  MOVE_B_MSG              DC.B        'MOVE.B',0
00001770= 4D 4F 56 45 2E 57 00     776  MOVE_W_MSG              DC.B        'MOVE.W',0
00001777= 4D 4F 56 45 2E 4C 00     777  MOVE_L_MSG              DC.B        'MOVE.L',0
0000177E                           778  
0000177E                           779  *other output instruction message constans
0000177E= 44 00                    780  MSG_D                   DC.B        'D',0
00001780= 41 00                    781  MSG_A                   DC.B        'A',0
00001782                           782  
00001782                           783  *storage locations for input
00001782                           784  START_ADDR_IN           DS.B        20
00001796                           785  
00001796                           786  *other I/O-related variables/constants
00001796  =00000001                787  INPUTTING_START         SET         1 ;if 1, we are inputting start address. If 0, we are inputting end address.
00001796                           788  DISPLAY_BUFFER          DS.W        5
000017A0                           789  
000017A0                           790  *EA/OPcode parsed instruction variables/constants
000017A0                           791  CURRENT_WORD            DS.W        1 ;current first 16 bits of an instruction.
000017A2                           792  CURRENT_MD              DS.B        1 ;current mode we are concerened with (ex: 000 for data register mode.)
000017A3                           793  CURRENT_REG             DS.B        1 ;current register number (address, data, etc) that we are looking at. Ex: D0,A5,etc
000017A4                           794  CURRENT_SRC_MD          DS.B        1 ;current source mode
000017A5                           795  CURRENT_SRC_REG         DS.B        1 ;current source register
000017A6                           796  CURRENT_DEST_MD         DS.B        1 ;current desination mode
000017A7                           797  CURRENT_DEST_REG        DS.B        1 ;current desination register
000017A8                           798  
000017A8                           799  *address constants
000017A8  =00003000                800  MIN_ADDRESS             EQU         $00003000
000017A8  =0FFF0000                801  MAX_ADDRESS             EQU         $0FFF0000
000017A8                           802  
000017A8                           803  *address variables
000017A8  =00007000                804  TEST_ORIGIN             SET         $00007000
000017A8  =00007000                805  NEXT_ADDR               SET         TEST_ORIGIN
000017A8  =00009000                806  END_ADDR                SET         $00009000
000017A8                           807  
000017A8                           808  *filters for isolating parts of a hexa instruction. X means 'unknown' and can be 0 or one after ANDI filter.
000017A8                           809  *To filter an instruction, ANDI it with the desired filter.
000017A8  =0000C000                810  FILT_2BIT_1             EQU         $C000   ;first 2 bits:                          XX00 0000 0000 0000
000017A8  =0000F000                811  FILT_NIB_1              EQU         $F000   ;first nibble:                          XXXX 0000 0000 0000
000017A8  =00003000                812  FILT_MOVE_SIZE          EQU         $3000   ;Size of a move operation:              00XX 0000 0000 0000
000017A8  =00000E00                813  FILT_DEST_REG           EQU         $0E00   ;destination register:                  0000 XXX0 0000 0000
000017A8  =000001A0                814  FILT_DEST_MD            EQU         $01A0   ;destination mode:                      0000 000X XX00 0000
000017A8  =00000038                815  FILT_SRC_MD             EQU         $0038   ;source mode:                           0000 0000 00XX X000
000017A8  =00000007                816  FILT_SRC_REG            EQU         $0007   ;source register:                       0000 0000 0000 0XXX
000017A8                           817  
000017A8                           818  *constants for comparing with filtered instructions. X means 'don't care' (and will be set to 0 by previous filter)
000017A8                           819  *(These do not represent the complete insturctions.)
000017A8                           820  *(Also note that repetition is allowed for clarity's sake, so two constants can share a value.)
000017A8  =00000000                821  CONST_ALL_0             EQU         $0000   ; all 0s:                               0000 0000 0000 0000
000017A8                           822      ;MOVE
000017A8  =00001000                823  CONST_MOVE_B            EQU         $1000   ; MOVE.B (use first nib)                0001 0000 0000 0000
000017A8  =00003000                824  CONST_MOVE_W            EQU         $3000   ; MOVE.W (use first nib)                0011 0000 0000 0000
000017A8  =00002000                825  CONST_MOVE_L            EQU         $2000   ; MOVE.L (use first nib)                0010 0000 0000 0000
000017A8                           826      ;Mode values
000017A8  =00000000                827  CONST_DATA_REG_MD       EQU         $00      ; Data register mode:     Dn            XXXX X000
000017A8  =00000001                828  CONST_ADDR_REG_MD       EQU         $01      ; Address register mode:  An            XXXX X001
000017A8  =00000002                829  CONST_ADDR_IND_MD       EQU         $02      ; Address indirect mode:  (An)          XXXX X010
000017A8  =00000003                830  CONST_ADDR_INCR_MD      EQU         $03      ; Address postincr. mode: (An)+         XXXX X011
000017A8  =00000004                831  CONST_ADDR_DECR_MD      EQU         $04      ; Address predecr. mode:  -(An)         XXXX X100
000017A8  =00000005                832  CONST_ADDR_DISPLC_MD    EQU         $05      ; Address w/ displacement:(d16,An)      XXXX X101
000017A8  =00000006                833  CONST_ADDR_INDEX_MD     EQU         $06      ; Address w/ index:       (d8,PC,Xn)    XXXX X110
000017A8  =00000007                834  CONST_ADDR_MISC_MD      EQU         $07      ; Various other addressing modes        XXXX X111
000017A8                           835       ;Constant register values (should not be necessary for register numbers like D5)
000017A8  =00000002                836  CONST_COUNTR_DISPLC_REG EQU         $02      ; Counter w/ displacement:(d16,PC)      XXXX X010
000017A8  =00000003                837  CONST_COUNTR_INDEX_REG  EQU         $03      ; Counter w/ index:       (d16,PC,Xn)   XXXX X011
000017A8  =00000000                838  CONST_ABS_SHORT_REG     EQU         $00      ; Absolute word:          (xxx).W       XXXX X000
000017A8  =00000001                839  CONST_ABS_LONG_REG      EQU         $01      ; Absolute long:          (xxx).L       XXXX X001
000017A8  =00000004                840  CONST_IMMEDIATE_REG     EQU         $04      ; Immediate data:         #imm          XXXX X100
000017A8                           841  
000017A8                           842  *full OPcode contstants
000017A8  =00004E70                843  RESET_CODE              EQU         $4E70   ; RESET                                 0100 1110 0111 0001
000017A8  =00004E71                844  NOP_CODE                EQU         $4E71   ; NOP                                   0100 1110 0111 0001
000017A8  =00004E72                845  STOP_CODE               EQU         $4E72   ; STOP                                  0100 1110 0111 0010
000017A8                           846  
000017A8                           847    
000017A8                           848  *############# END VARIABLES/CONSTANTS #########################
000017A8                           849  
000017A8                           850      END START        ; last line of source, very end of the program

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCII_TO_HEX        10B4
BEGIN_READ          12E2
CHECK_ADDR_DECR_MD  1520
CHECK_ADDR_DISPLC_MD  152E
CHECK_ADDR_INCR_MD  1512
CHECK_ADDR_INDEX_MD  153C
CHECK_ADDR_IND_MD   1504
CHECK_ADDR_MISC_MD  154A
CHECK_ADDR_REG_MD   14F6
CHECK_CONSTANTS     1324
CHECK_DATA_REG_MD   14D0
CHECK_DONE_READING  1308
CHECK_IMMEDIATE_REG  1558
CHECK_MOVE_B        139A
CHECK_MOVE_L        142E
CHECK_MOVE_W        1418
CHECK_NON_CONSTANTS  1394
CHECK_NOP           1338
CHECK_RESET         1328
CHECK_STOP          1384
COMMA               157D
CONFIRMED_NEXT_OP   12F6
CONST_ABS_LONG_REG  1
CONST_ABS_SHORT_REG  0
CONST_ADDR_DECR_MD  4
CONST_ADDR_DISPLC_MD  5
CONST_ADDR_INCR_MD  3
CONST_ADDR_INDEX_MD  6
CONST_ADDR_IND_MD   2
CONST_ADDR_MISC_MD  7
CONST_ADDR_REG_MD   1
CONST_ALL_0         0
CONST_COUNTR_DISPLC_REG  2
CONST_COUNTR_INDEX_REG  3
CONST_DATA_REG_MD   0
CONST_IMMEDIATE_REG  4
CONST_MOVE_B        1000
CONST_MOVE_L        2000
CONST_MOVE_W        3000
CONVERSION_DONE     12B0
COUNT_INPUT_DIGITS  1046
CR                  D
CURRENT_DEST_MD     17A6
CURRENT_DEST_REG    17A7
CURRENT_MD          17A2
CURRENT_REG         17A3
CURRENT_SRC_MD      17A4
CURRENT_SRC_REG     17A5
CURRENT_WORD        17A0
DIG_CONV_DONE_1     10DE
DIG_CONV_DONE_2     1112
DIG_CONV_DONE_3     114A
DIG_CONV_DONE_4     1182
DIG_CONV_DONE_5     11BA
DIG_CONV_DONE_6     11F2
DIG_CONV_DONE_7     122A
DIG_CONV_DONE_8     1262
DISPLAY_BUFFER      1796
DISPLAY_SOURCE      14B8
DOLLAR              157B
DONE_READING        1310
DONE_READING_MSG    173E
END_ADDR            9000
END_ADDR_MSG        15B5
FILT_2BIT_1         C000
FILT_DEST_MD        1A0
FILT_DEST_REG       E00
FILT_MOVE_SIZE      3000
FILT_NIB_1          F000
FILT_SRC_MD         38
FILT_SRC_REG        7
GO_TO_NEXT_OP       12F2
HASH                157F
INPUTTING_START     1
INVALID_ADDR_HIGH   12A0
INVALID_ADDR_H_MSG  16FD
INVALID_ADDR_INPUT  1270
INVALID_ADDR_LOW    1290
INVALID_ADDR_L_MSG  16BD
INVALID_ADDR_MSG    1636
INVALID_END_ADDR    1280
INVALID_END_ADDR_MSG  166C
INVALID_LEN_MSG     15E8
LF                  A
MAX_ADDRESS         FFF0000
MIN_ADDRESS         3000
MOVE_B_FOUND        13AC
MOVE_B_MSG          1769
MOVE_L_FOUND        1440
MOVE_L_MSG          1777
MOVE_W_FOUND        142A
MOVE_W_MSG          1770
MSG_A               1780
MSG_D               177E
NEXT_ADDR           7000
NOP_CODE            4E71
NOP_FOUND           1344
NOP_MSG             1760
PREPARE_DISPLAY     12EE
PROMPT_INPUT        1008
READ_CURRENT_OP     1320
READ_DEST_MODE      1466
READ_DEST_REG       1448
READ_SOURCE_MODE    1482
READ_SOURCE_REG     149E
RESET_CODE          4E70
RESET_FOUND         1334
RESET_MSG           175A
RETURN              1576
SET_END_ADDR        12D8
SET_START_ADDR      12D2
SPACE               1579
START               1000
START_ADDR_IN       1782
START_ADDR_MSG      1581
STOP                1004
STOP_CODE           4E72
STOP_FOUND          1390
STOP_MSG            1764
TAKE_USER_INPUT     1034
TAKE_USER_IN_E      1020
TAKE_USER_IN_S      100C
TEST_ORIGIN         7000
VALID_ADDR          12C6
